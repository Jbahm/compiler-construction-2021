-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from ParExpaddmult.y
-----------------------------------------------------------------------------

state 7 contains 2 shift/reduce conflicts.
state 8 contains 2 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pExp -> Exp                                 (0)
	Integer -> L_integ                                 (1)
	Exp -> Exp '+' Exp                                 (2)
	Exp -> Exp '*' Exp                                 (3)
	Exp -> Integer                                     (4)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'*'            { PT _ (TS _ 1) }
	'+'            { PT _ (TS _ 2) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pExp     rule  0
	Integer         rule  1
	Exp             rules 2, 3, 4

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	L_integ        shift, and enter state 2

	Integer        goto state 3
	Exp            goto state 4

State 1


	L_integ        shift, and enter state 2


State 2

	Integer -> L_integ .                                (rule 1)

	'*'            reduce using rule 1
	'+'            reduce using rule 1
	%eof           reduce using rule 1


State 3

	Exp -> Integer .                                    (rule 4)

	'*'            reduce using rule 4
	'+'            reduce using rule 4
	%eof           reduce using rule 4


State 4

	%start_pExp -> Exp .                                (rule 0)
	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp . '*' Exp                                (rule 3)

	'*'            shift, and enter state 5
	'+'            shift, and enter state 6
	%eof           accept


State 5

	Exp -> Exp '*' . Exp                                (rule 3)

	L_integ        shift, and enter state 2

	Integer        goto state 3
	Exp            goto state 8

State 6

	Exp -> Exp '+' . Exp                                (rule 2)

	L_integ        shift, and enter state 2

	Integer        goto state 3
	Exp            goto state 7

State 7

	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp '+' Exp .                                (rule 2)
	Exp -> Exp . '*' Exp                                (rule 3)

	'*'            shift, and enter state 5
			(reduce using rule 2)

	'+'            shift, and enter state 6
			(reduce using rule 2)

	%eof           reduce using rule 2


State 8

	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp . '*' Exp                                (rule 3)
	Exp -> Exp '*' Exp .                                (rule 3)

	'*'            shift, and enter state 5
			(reduce using rule 3)

	'+'            shift, and enter state 6
			(reduce using rule 3)

	%eof           reduce using rule 3


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 5
Number of terminals: 3
Number of non-terminals: 3
Number of states: 9
